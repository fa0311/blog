---
import twemoji from "@twemoji/api";
import Path from "node:path";
import "zenn-content-css";
import Articles from "../../components/Articles.astro";
import Topics from "../../components/Topics.astro";
import Zenn from "../../components/Zenn.astro";
import Layout from "../../layouts/Layout.astro";
import { getArticleList, getRelatedArticles, markdownToHtmlNormalized } from "../../lib/zenn";

export const getStaticPaths = async () => {
  const articles = await getArticleList();

  return articles.map((article) => {
    const slug = Path.basename(article.file, ".md");
    const html = markdownToHtmlNormalized(article.rawContent());
    const relatedArticles = getRelatedArticles(articles, article).slice(0, 6);
    const headings = article.getHeadings();
    const secondDepth = headings.length > 1 ? headings[1].depth : headings[0].depth;

    return {
      params: { id: slug },
      props: {
        html: html.contents(),
        title: article.frontmatter.title,
        emoji: article.frontmatter.emoji,
        topics: article.frontmatter.topics,
        type: article.frontmatter.type,
        nav: headings
          .filter((heading) => heading.depth - secondDepth < 2)
          .map((article) => ({
            title: article.text,
            slug: article.slug,
            depth: secondDepth >= article.depth ? 1 : 2,
          })),
        relatedArticles: relatedArticles.map((article) => ({
          title: article.frontmatter.title,
          emoji: article.frontmatter.emoji,
          slug: Path.basename(article.file, ".md"),
        })),
      },
    };
  });
};
const { relatedArticles, html, title, emoji, topics, type, nav } = Astro.props;
---

<Layout>
  <header class="header-content">
    {
      emoji && (
        <div class="header-emoji" set:html={twemoji.parse(emoji, { folder: "svg", ext: ".svg" })} />
      )
    }
    <div class="title">
      <h1>{title}</h1>
    </div>
  </header>
  <main>
    <article>
      <div class="content-main">
        <div class="topics">
          <Topics topics={type ? [...(topics ?? []), type] : (topics ?? [])} />
        </div>
        <Zenn html={html} />
      </div>

      <aside>
        <div class="content-nav">
          <h2 class="nav-title">目次</h2>
          <nav>
            <ol>
              {
                nav.map(({ title, slug, depth }) => (
                  <li class:list={[`depth-${depth}`]}>
                    <a href={`#${slug}`}>{title}</a>
                  </li>
                ))
              }
            </ol>
          </nav>
        </div>
      </aside>
    </article>
    <section class="related-articles-content">
      <h2>Read next</h2>
      <Articles type="list" data={relatedArticles} />
    </section>
  </main>
  <footer>
    <div class="footer-content">
      <p>© 114514</p>
    </div>
  </footer>

  <style>
    h1 {
      font-size: 24px;
      margin: 24px 0px 0px;
    }

    .header-emoji {
      width: 75px;
      height: 75px;
      margin: 0 auto;
    }
    .topics {
      margin: 10px 0;
    }

    .header-content {
      padding: 60px;
      margin: 0 auto;
      max-width: 840px;
    }

    main {
      max-width: 1200px;
      padding: 0 40px;
      margin: 0 auto;
    }

    article {
      display: grid;
      grid-template-columns: 1fr 300px;
      gap: 30px;
    }
    @media (max-width: 920px) {
      article {
        grid-template-columns: 1fr;
      }

      aside {
        display: none;
      }
    }

    .title {
      display: flex;
      justify-content: center;
    }

    .nav-title {
      margin: 0;
      font-size: 16px;
    }

    .content-main {
      max-width: 830px;
      padding: 20px 40px 40px 40px;
      margin: 0 0 40px 0;
      background-color: #fff;
      border-radius: 4px;
      border: 1px solid #e4edf4;
      overflow: hidden;
    }

    .related-articles-content {
      margin: 0 auto;
      max-width: 880px;
      padding: 0 0 40px;
    }

    .related-articles-content h2 {
      font-size: 1.7rem;
      font-weight: 700;
    }

    footer {
      background-color: #f8f9fa;
      padding: 20px 0;
      text-align: center;
    }

    aside {
      width: 300px;
    }
    .content-nav {
      position: sticky;
      top: 30px;
      padding: 20px 20px 25px;
      background-color: #ffffff;
      border-radius: 4px;
      border: 1px solid #e4edf4;
      margin: 0 0 40px 0;
    }

    section {
      margin: 0 0 40px 0;
    }

    ol {
      position: relative;
    }

    ol:before {
      position: absolute;
      top: 17px;
      bottom: 8px;
      left: 5px;
      width: 2px;
      content: "";
      background: #99cbf4;
      border-radius: 0 0 5px 5px;
    }

    li {
      position: relative;
      padding-left: 21px;
    }

    li:before {
      border: 2px solid #ffffffff;
      position: absolute;
      content: "";
      border-radius: 50%;
    }

    li.depth-1 a {
      color: #838d95;
      font-weight: 700;
      font-size: 14px;
    }

    li.depth-2 a {
      color: #65717b;
      font-size: 14px;
    }

    li.depth-1:before {
      top: 4px;
      left: 0;
      width: 12px;
      height: 12px;
      background: #99cbf4;
      border: 2px solid #fff;
    }

    li.depth-2:before {
      top: 6px;
      left: 2px;
      width: 8px;
      height: 8px;
      background: #99cbf4;
      border: 2px solid #fff;
    }

    li:hover a {
      color: #333333;
    }

    li:hover:before {
      background: #3ea8ff;
    }

    /* 
  top: 6px;
  left: -19px;
  width: 8px;
  height: 8px;
  background: #d9eafb;
  border: 2px solid #fff; */
  </style>
</Layout>
